/*There are many types of barcodes but we are generating here a upc barcode
which means universal product code it contains total of 95 bars*/
#include<iostream.h>
#include<conio.h>
#include<graphics.h>
#include<stdio.h>
class Barcode
{
private:
/*The starting six digits in the barcode represnt the manufacturing
id no(manu) and the last 5 digit represent the product number(product_number)
and the last(12th) digit represent the check digit in the barcode*/
unsigned int product_number[5],manu[6];
int j,count,pcount,esum,osum;
public:
unsigned int a[6],b[5];
/*We have taken  an array so that when anyone enters
zero in starting so that there would be no problem array a and b have taken to copy 
the values of manufacturing number and product number*/
Barcode()
{
j=0;
count=0;/*count stand for to get to know the position of digits whether they are 
         at even place or odd place in manufacturing number*/
pcount=0;/*pcount stand for to get to know the position of digits whether they are 
          at even place or odd place in product number*/
esum=0;/*esum stand for the sum of the digits those are at even place*/
osum=0;/*osum stand for the sum of the digits thode are at odd place*/
}
void mannumber()
{
cout<<"\tEnter the 6 digit maufacturing id no:\n";
for(j=0;j<6;j++)
{
cin>>manu[j];
a[j]=manu[j];
}
}
/*product number is unique for every item which makes barcode unique*/
void pronumber()
{
cout<<"\tEnter the 5 digit product number:\n";
for(j=0;j<5;j++)
{
cin>>product_number[j];
b[j]=product_number[j];
}
}
/*This is the function to calcluate the check digit*/
int calculate()
{
for(j=0;j<6;j++)
{
count++;
  if(count%2==0)
  {
  esum=esum+a[j];
  }
  else
  {
  osum=osum+a[j];
  }
}
for(j=0;j<5;j++)
{
pcount++;
  if(pcount%2==0)
  {
  esum=esum+b[j];
  }
  else
  {
  osum=osum+b[j];
  }
}
if((3*osum+esum)%10==0)
{
return 0;
}
else
{
return(10-(3*osum+esum)%10);
}
}
};
int main()
{
clrscr();
/*gd represent the graphics driver and gm represnt the graphics mode*/
int gd=DETECT,gm=0,y=0,x;
static int pos=0;
static int i=0;
int k=0,l=0;
int mcount=0;
initgraph(&gd,&gm," ");
Barcode b1;
/*Function used to change the background color of the screen*/
setbkcolor(WHITE);
setcolor(BLACK);
cout<<"REMEMBER:\nEnter one digit at a time otherwise generated barcode will not be correct:\n\n";
b1.mannumber();
b1.pronumber();
/*fuction used to fill the color in bar because its default color is white*/
setfillstyle(SOLID_FILL,WHITE);
bar(36,180,43,265);
setfillstyle(SOLID_FILL,RED);
bar(44,180,46,265);
/*Function used to define the boundry of the bars*/
setfillstyle(SOLID_FILL,WHITE);
bar(47,180,49,265);
setfillstyle(SOLID_FILL,RED);
bar(50,180,52,265);
/*Function to print the bars of the manufacturing no.*/
for(k=0;k<6;k++)
{
switch(b1.a[k])
{
case 0:
if(b1.a[k]==0)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 1:
if(b1.a[k]==1)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 2:
if(b1.a[k]==2)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 3:
if(b1.a[k]==3)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(4+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 4:
if(b1.a[k]==4)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 5:
if(b1.a[k]==5)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 6:
if(b1.a[k]==6)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(4+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 7:
if(b1.a[k]==7)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 8:
if(b1.a[k]==8)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
case 9:
if(b1.a[k]==9)
{
mcount++;
(mcount==1)?(y=5):(y=0);
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260+y);
}
pos=i+1;
}
break;
}
}
/*function to print the mid bars*/
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
/*Function to print the bars of the product number*/
for(l=0;l<5;l++)
{
switch(b1.b[l])
{
case 0:
if(b1.b[l]==0)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 1:
if(b1.b[l]==1)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 2:
if(b1.b[l]==2)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 3:
if(b1.b[l]==3)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(4+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 4:
if(b1.b[l]==4)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 5:
if(b1.b[l]==5)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 6:
if(b1.b[l]==6)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(4+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 7:
if(b1.b[l]==7)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 8:
if(b1.b[l]==8)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
case 9:
if(b1.b[l]==9)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,260);
}
pos=i+1;
}
break;
}
}
x=b1.calculate();
switch(x)
{
case 0:
if(x==0)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 1:
if(x==1)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 2:
if(x==2)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 3:
if(x==3)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(4+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 4:
if(x==4)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 5:
if(x==5)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 6:
if(x==6)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(4+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 7:
if(x==7)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 8:
if(x==8)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
case 9:
if(x==9)
{
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(3+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(1+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
}
break;
}
/*Logic for the closing lines*/
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,RED);
for(i=pos;i<(2+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
setfillstyle(SOLID_FILL,WHITE);
for(i=pos;i<(7+pos);i++)
{
bar(53+i,180,54+i,265);
}
pos=i+1;
getch();
closegraph();
return 0;
}